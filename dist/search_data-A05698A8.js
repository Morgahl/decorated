searchData={"items":[{"type":"module","title":"Decorated","doc":"This module provides a single macro `use Decorated` that can be used to decorate functions with other functions. The `use Decorated` macro\naccepts a list of modules that define decorators. The decorators are imported into the module in the order they are passed. Please refer\nto the documentation for the individual decorators for more information.","ref":"Decorated.html"},{"type":"module","title":"Example - Decorated","doc":"defmodule MyMath do\n      use Decorated, :dbg\n      use Decorated, :hooks\n      use Decorated, :logger\n\n      @decorate pre(fn -> IO.inspect({a, b}, label: \"pre\") end)\n      @decorate around(\n                  fn -> IO.inspect({a, b}, label: \"around pre\") end,\n                  &IO.inspect({a, b, &1, &2}, label: \"around post\")\n                )\n      @decorate post(&IO.inspect({a, b, &1}, label: \"post\"))\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n    end\n\n    iex> MyMath.add(1, 2)\n    #> pre: {1, 2}\n    #> around pre: {1, 2}\n    #> around post: {1, 2, {:ok, 3}, nil}\n    #> post: {1, 2, {:ok, 3}}\n    {:ok, 3}","ref":"Decorated.html#module-example"},{"type":"type","title":"Decorated.decorators/0","doc":"","ref":"Decorated.html#t:decorators/0"},{"type":"type","title":"Decorated.opts/0","doc":"","ref":"Decorated.html#t:opts/0"},{"type":"module","title":"Decorated.Dbg","doc":"A simple decorator that provides `dbg/1` and `dbg/2` calls around the decorated function body.","ref":"Decorated.Dbg.html"},{"type":"module","title":"Example - Decorated.Dbg","doc":"defmodule MyMath do\n      use Decorated.Dbg\n\n      @decorate dbg_log()\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n    end\n\n    iex> MyMath.add(1, 2)\n    #> add(a, b) #=> {:ok, 3}\n    {:ok, 3}","ref":"Decorated.Dbg.html#module-example"},{"type":"macro","title":"Decorated.Dbg.dbg_log/0","doc":"A decorator that wraps the function body in a `dbg/2` call.\n\nThe `dbg/2` call is configured with the provided options merged with the default options.","ref":"Decorated.Dbg.html#dbg_log/0"},{"type":"macro","title":"Example - Decorated.Dbg.dbg_log/0","doc":"defmodule MyMath do\n      use Decorated.Dbg\n\n      @decorate dbg_log()\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate dbg_log([pretty: false])\n      @spec sub(number(), number()) :: number()\n      def sub(a, b), do: {:ok, a - b}\n    end\n\n    iex> MyMath.add(1, 2)\n    #> add(a, b) #=> {:ok, 3}\n    {:ok, 3}\n\n    iex> MyMath.sub(1, 2)\n    #> add(a, b) #=> {:ok, -1}\n    {:ok, -1}","ref":"Decorated.Dbg.html#dbg_log/0-example"},{"type":"macro","title":"Decorated.Dbg.dbg_log/1","doc":"A decorator that wraps the function body in a `dbg/2` call.\n\nThe `dbg/2` call is configured with the provided options merged with the default options.","ref":"Decorated.Dbg.html#dbg_log/1"},{"type":"macro","title":"Example - Decorated.Dbg.dbg_log/1","doc":"defmodule MyMath do\n      use Decorated.Dbg\n\n      @decorate dbg_log()\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate dbg_log([pretty: false])\n      @spec sub(number(), number()) :: number()\n      def sub(a, b), do: {:ok, a - b}\n    end\n\n    iex> MyMath.add(1, 2)\n    #> add(a, b) #=> {:ok, 3}\n    {:ok, 3}\n\n    iex> MyMath.sub(1, 2)\n    #> add(a, b) #=> {:ok, -1}\n    {:ok, -1}","ref":"Decorated.Dbg.html#dbg_log/1-example"},{"type":"module","title":"Decorated.Hooks","doc":"A simple decorator that provides lifecycle hooks for the decorated function.","ref":"Decorated.Hooks.html"},{"type":"module","title":"Example - Decorated.Hooks","doc":"defmodule MyMath do\n      use Decorated.Hooks\n\n      @decorate pre(fn -> IO.inspect({a, b}, label: \"pre\") end)\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate post(&IO.inspect({a, b, &1}, label: \"post\"))\n      @spec sub(number(), number()) :: number()\n      def sub(a, b), do: {:ok, a - b}\n\n      @decorate around(\n                  fn -> IO.inspect({a, b}, label: \"around pre\") end,\n                  &IO.inspect({a, b, &1, &2}, label: \"around post\")\n                )\n      @spec multiply(number(), number()) :: number()\n      def multiply(a, b), do: {:ok, a * b}\n    end\n\n    iex> MyMath.add(1, 2)\n    #> pre: {1, 2}\n    {:ok, 3}\n\n    iex> MyMath.sub(1, 2)\n    #> post: {1, 2, {:ok, -1}}\n    {:ok, -1}\n\n    iex> MyMath.multiply(1, 2)\n    #> around pre: {1, 2}\n    #> around post: {1, 2, {:ok, 2}, nil}\n    {:ok, 2}","ref":"Decorated.Hooks.html#module-example"},{"type":"macro","title":"Decorated.Hooks.around/2","doc":"","ref":"Decorated.Hooks.html#around/2"},{"type":"macro","title":"Example - Decorated.Hooks.around/2","doc":"defmodule MyMath do\n      use Decorated.Hooks\n\n      @decorate around(\n                  fn -> IO.inspect({a, b}, label: \"pre()\") end,\n                  &IO.inspect({a, b, &1, &2}, label: \"post(result, presult)\"))\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate around(\n                  fn ctx -> IO.inspect({a, b, ctx}, label: \"pre(ctx)\") end,\n                  fn result, presult, ctx -> IO.inspect({a, b, result, presult, ctx}, label: \"post(ctx, result, presult)\") end\n      @spec add(number(), number()) :: number()\n      def add!(a, b), do: a + b\n    end\n\n    iex> MyMath.add(1, 2)\n    #> pre: {1, 2}\n    #> post: {1, 2, {:ok, 3}, {1, 2}}\n    {:ok, 3}\n\n    iex> MyMath.add!(1, 2)\n    #> pre: {1, 2, %Context{args: [1, 2], file: \"b/my_math.ex\", line: 23}}\n    #> post: {1, 2, 3, {1, 2, %Context{args: [1, 2], file: \"lib/my_math.ex\", line: 23}}}\n    3","ref":"Decorated.Hooks.html#around/2-example"},{"type":"macro","title":"Decorated.Hooks.post/1","doc":"","ref":"Decorated.Hooks.html#post/1"},{"type":"macro","title":"Example - Decorated.Hooks.post/1","doc":"defmodule MyMath do\n      use Decorated.Hooks\n\n      @decorate post(&IO.inspect({a, b, &1}, label: \"post(result)\"))\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate post(fn result, presult -> IO.inspect({a, b, result, presult}, label: \"post(result, ctx)\"))\n      @spec add!(number(), number()) :: number()\n      def add!(a, b), do: a + b\n    end\n\n    iex> MyMath.add(1, 2)\n    #> post: {1, 2, {:ok, 3}}\n    {:ok, 3}\n\n    iex> MyMath.add!(1, 2)\n    #> post: {1, 2, 3, {1, 2}}\n    3","ref":"Decorated.Hooks.html#post/1-example"},{"type":"macro","title":"Decorated.Hooks.pre/1","doc":"","ref":"Decorated.Hooks.html#pre/1"},{"type":"macro","title":"Example - Decorated.Hooks.pre/1","doc":"defmodule MyMath do\n      use Decorated.Hooks\n\n      @decorate pre(fn -> IO.inspect({a, b}, label: \"pre()\") end)\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate pre(fn ctx -> IO.inspect({a, b, ctx}, label: \"pre(ctx)\") end)\n      @spec add!(number(), number()) :: number()'\n      def add!(a, b), do: a + b\n    end\n\n    iex> MyMath.add(1, 2)\n    #> pre: {1, 2}\n    {:ok, 3}\n\n    iex> MyMath.add!(1, 2)\n    #> pre: {1, 2, %Context{args: [1, 2], file: \"lib/my_math.ex\", line: 23}}\n    3","ref":"Decorated.Hooks.html#pre/1-example"},{"type":"module","title":"Decorated.Logger","doc":"A simple decorator that takes a message and logs the function name, arguments, and result of a function call.","ref":"Decorated.Logger.html"},{"type":"module","title":"Example - Decorated.Logger","doc":"defmodule MyMath do\n      use Decorated.Logger\n\n      @decorate info_log(catch: :error)\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate debug_log(message: fn result -> \"sub() -> %{result}\" end)\n      @spec sub(number(), number()) :: number()\n      def sub(a, b), do: {:ok, a - b}\n\n      @decorate warning_log(message: fn result -> \"multiply() -> %{result}\" end)\n      @spec multiply(number(), number()) :: number()\n      def multiply(a, b), do: {:ok, a * b}\n\n      @decorate silent_log(catch: :error)\n      @spec divide!(number(), number()) :: number()\n      def divide!(_, 0), do: raise(\"do not divide by zero in MyMath functions\")\n      def divide!(a, b), do: a / b\n    end\n\n    iex> MyMath.add(1, 2)\n    #> 23:14:44.410 [info] MyMath.add!(1, 2) ->\n    {:ok, 3}\n\n    iex> MyMath.sub(1, 2)\n    #> 23:14:44.410 [debug] sub() -> -1\n    {:ok, -1}\n\n    iex> MyMath.multiply(1, 2)\n    #> 23:14:44.410 [warning] multiply() -> 2\n    {:ok, 2}\n\n    iex> MyMath.divide!(4, 2)\n    2.0\n\n    iex> MyMath.divide!(4, 0)\n    ** (RuntimeError) do not divide by zero in MyMath functions\n\n    #> 23:14:44.410 [error] MyMath.divide!(4, 0) -> ** (RuntimeError) do not divide by zero in MyMath functions","ref":"Decorated.Logger.html#module-example"},{"type":"macro","title":"Decorated.Logger.alert_log/0","doc":"A decorator that produces a ALERT level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#alert_log/0"},{"type":"macro","title":"Decorated.Logger.alert_log/1","doc":"A decorator that produces a ALERT level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#alert_log/1"},{"type":"macro","title":"Decorated.Logger.critical_log/0","doc":"A decorator that produces a CRITICAL level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#critical_log/0"},{"type":"macro","title":"Decorated.Logger.critical_log/1","doc":"A decorator that produces a CRITICAL level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#critical_log/1"},{"type":"macro","title":"Decorated.Logger.debug_log/0","doc":"A decorator that produces a DEBUG level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#debug_log/0"},{"type":"macro","title":"Decorated.Logger.debug_log/1","doc":"A decorator that produces a DEBUG level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#debug_log/1"},{"type":"macro","title":"Decorated.Logger.emergency_log/0","doc":"A decorator that produces a EMERGENCY level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#emergency_log/0"},{"type":"macro","title":"Decorated.Logger.emergency_log/1","doc":"A decorator that produces a EMERGENCY level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#emergency_log/1"},{"type":"macro","title":"Decorated.Logger.error_log/0","doc":"A decorator that produces a ERROR level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#error_log/0"},{"type":"macro","title":"Decorated.Logger.error_log/1","doc":"A decorator that produces a ERROR level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#error_log/1"},{"type":"macro","title":"Decorated.Logger.info_log/0","doc":"A decorator that produces an INFO level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#info_log/0"},{"type":"macro","title":"Decorated.Logger.info_log/1","doc":"A decorator that produces an INFO level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#info_log/1"},{"type":"macro","title":"Decorated.Logger.notice_log/0","doc":"A decorator that produces a NOTICE level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#notice_log/0"},{"type":"macro","title":"Decorated.Logger.notice_log/1","doc":"A decorator that produces a NOTICE level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#notice_log/1"},{"type":"macro","title":"Decorated.Logger.silent_log/0","doc":"A decorator that produces no log UNLESS a configuration is provided in which case it produces a log at the provided\nlevel using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#silent_log/0"},{"type":"macro","title":"Decorated.Logger.silent_log/1","doc":"A decorator that produces no log UNLESS a configuration is provided in which case it produces a log at the provided\nlevel using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#silent_log/1"},{"type":"macro","title":"Decorated.Logger.warning_log/0","doc":"A decorator that produces a WARNING level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#warning_log/0"},{"type":"macro","title":"Decorated.Logger.warning_log/1","doc":"A decorator that produces a WARNING level log using the provided message.\n\nThe message has interpolated access to the function arguments by name defined in the imeadiately following function\ndefinition.","ref":"Decorated.Logger.html#warning_log/1"},{"type":"type","title":"Decorated.Logger.options/0","doc":"","ref":"Decorated.Logger.html#t:options/0"},{"type":"module","title":"Decorated.Logger.Opts","doc":"A module that defines the configurations options for the `Decorated.Logger` decorator.","ref":"Decorated.Logger.Opts.html"},{"type":"module","title":"Option - Decorated.Logger.Opts","doc":"* `:message` - `message_opt()` - The message to log. This can be a string, a binary, or an IO list.\n* `:none` - `log_level()` - The log level to use when the decorated function returns `:none`. Defaults to the same level as the decorating log level.\n* `:error` - `log_level()` - The log level to use when the decorated function returns `:error` or `{:error, _}`. Defaults to the same level as the decorating log level.\n* `:catch` - `log_level()` - The log level to use when the decorated function raises an `Exception.kind()`. Defaults to the same level as the decorating log level.\n* `:ignored` - `ignore_behaviour()` - The behaviour to use when the decorated function has an ignored argument ex. `_` or `_ignored`.\n  Defaults to `:rename`.\n  * `:drop` - Drop the ignored argument from the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(:ok)`\n  * `:rename` - Rename the ignored argument in the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(_, _a, :ok)`\n  * `:keep` - Keep the ignored argument in the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(nil, nil, :ok)`\n* `:metadata` - `Keyword.t()` - The metadata to include in the log message. Injects the `:line` metadata by default.","ref":"Decorated.Logger.Opts.html#module-option"},{"type":"module","title":"Example - Decorated.Logger.Opts","doc":"defmodule MyMath do\n      use Decorated.Logger\n\n      @decorate info_log(catch: :error)\n      @spec add(number(), number()) :: number()\n      def add(a, b), do: {:ok, a + b}\n\n      @decorate debug_log(error: :critical)\n      @spec sub(number(), number()) :: number()\n      def sub(a, b), do: {:ok, a - b}\n\n      @decorate critical_log(message: fn result -> \"multiply() -> %{result}\" end)\n      @spec multiply(number(), number()) :: number()\n      def multiply(a, b), do: {:ok, a * b}\n    end\n\n    iex> MyMath.add(1, 2)\n    #> 23:14:44.410 [info] MyMath.add!(1, 2) -> {:ok, 3}\n    {:ok, 3}\n\n    iex> MyMath.sub(1, 2)\n    #> 23:14:44.410 [debug] sub() -> -1\n    {:ok, -1}\n\n    iex> MyMath.multiply(1, 2)\n    #> 23:14:44.410 [critical] multiply() -> 2\n    {:ok, 2}","ref":"Decorated.Logger.Opts.html#module-example"},{"type":"type","title":"Decorated.Logger.Opts.ignore_behaviour/0","doc":"The ignore behaviour to use for a given configuration.\n\n* `:drop` - Drop the ignored argument from the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(:ok)`\n* `:rename` - Rename the ignored argument in the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(_, _a, :ok)`\n* `:keep` - Keep the ignored argument in the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(nil, nil, :ok)`","ref":"Decorated.Logger.Opts.html#t:ignore_behaviour/0"},{"type":"type","title":"Decorated.Logger.Opts.level/0","doc":"The log level to use for a given configuration.\n\nIn addition to the standard log levels provided by `Logger`, the following log levels are also supported:\n* `:silent` - Do not log the decorated function.","ref":"Decorated.Logger.Opts.html#t:level/0"},{"type":"type","title":"Decorated.Logger.Opts.log_opt/0","doc":"The log level configuration, message, and metadata, and log level overides for common divergent scenarios.","ref":"Decorated.Logger.Opts.html#t:log_opt/0"},{"type":"type","title":"Option - Decorated.Logger.Opts.log_opt/0","doc":"* `:message` - `message_opt()` - The message to log. This can be a string, a binary, or an IO list.\n* `:none` - `log_level()` - The log level to use when the decorated function returns `:none`. Defaults to the same level as the decorating log level.\n* `:error` - `log_level()` - The log level to use when the decorated function returns `:error` or `{:error, _}`. Defaults to the same level as the decorating log level.\n* `:catch` - `log_level()` - The log level to use when the decorated function raises an `Exception.kind()`. Defaults to the same level as the decorating log level.\n* `:ignored` - `ignore_behaviour()` - The behaviour to use when the decorated function has an ignored argument ex. `_` or `_ignored`. Defaults to `:rename`.\n  * `:drop` - Drop the ignored argument from the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(:ok)`\n  * `:rename` - Rename the ignored argument in the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(_, _a, :ok)`\n  * `:keep` - Keep the ignored argument in the log message. `foo(_, _a, bar)(nil, nil, :ok)` => `foo(nil, nil, :ok)`\n* `:metadata` - `Keyword.t()` - The metadata to include in the log message. Injects the `:line` metadata by default.","ref":"Decorated.Logger.Opts.html#t:log_opt/0-option"},{"type":"type","title":"Decorated.Logger.Opts.message_opt/0","doc":"","ref":"Decorated.Logger.Opts.html#t:message_opt/0"},{"type":"extras","title":"Decorated","doc":"# Decorated\n\nA collection of Decorators.\n\nDocumentation can be found at: https://morgahl.github.io/decorated (it currently follows `main`)","ref":"readme.html"},{"type":"extras","title":"Installation - Decorated","doc":"If [available in Hex](https://hex.pm/docs/publish), the package can be installed\nby adding `decorated` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    # No `:ref`` is currently specified as `main` is the only branch and no version has been cut yet\n    {:decorated, github: \"morgahl/decorated\"}\n  ]\nend\n```","ref":"readme.html#installation"},{"type":"extras","title":"Examples - Decorated","doc":"Currently the only example of this library is `MyMath` located in `examples/`.\n\n#","ref":"readme.html#examples"},{"type":"extras","title":"MyMath - Decorated","doc":"This example is just a really terrible wrapper around math operations with arbitrary failure conditions for the `Decorated.Logger` to trigger from.\n\n```sh\n$ MIX_ENV=examples mix run examples/my_math.exs\n```\nOR\n```ex\n$ MIX_ENV=examples iex -S mix\n\niex> MyMath.debug_me! 42, 3.33\n```","ref":"readme.html#mymath"},{"type":"extras","title":"LICENSE","doc":"MIT License\n\nCopyright (c) 2023 Marc Hayes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.","ref":"license.html"}],"content_type":"text/markdown"}